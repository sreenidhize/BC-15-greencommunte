{"ast":null,"code":"var _jsxFileName = \"/home/sring/BC-15/devops-bootcamp-jan22/BC15-green-commute/web-ui/src/components/molecules/InputTextField/PlainInputField.js\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport CustomChip from \"./CustomChip\";\nimport { IconButton, InputAdornment, InputBase, TextField, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { convertToSentenceCase } from \"../../../state/converter/jobConverter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlainInputField = _ref => {\n  let {\n    classes,\n    isMulti,\n    options,\n    icon,\n    placeholder,\n    onChange,\n    value,\n    Skills\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    multiple: isMulti,\n    options: options,\n    defaultValue: Skills,\n    onChange: onChange,\n    value: value,\n    className: classes.root,\n    getOptionLabel: option => convertToSentenceCase(option),\n    renderTags: (chips, getTagProps) => chips.map((option, index) => /*#__PURE__*/_jsxDEV(CustomChip, {\n      variant: \"outlined\",\n      label: /*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.chipLabel,\n        variant: 'h4',\n        children: option\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 28\n      }, this),\n      size: \"small\",\n      ...getTagProps({\n        index\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }, this)),\n    renderInput: params => !isMulti ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.innerInputBase,\n      ref: params.InputProps.ref,\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        children: icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(InputBase, { ...params.inputProps,\n        inputProps: {\n          className: classes['textInput']\n        },\n        placeholder: placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      variant: \"outlined\",\n      placeholder: placeholder,\n      InputProps: { ...params.InputProps,\n        startAdornment: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"start\",\n            children: icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 43\n          }, this), params.InputProps.startAdornment]\n        }, void 0, true),\n        endAdornment: null,\n        classes: {\n          root: classes['textField'],\n          input: classes['textInput']\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PlainInputField;\n\nconst mapStateToProps = state => {\n  return {\n    Skills: state.skills\n  };\n};\n\nexport default connect(mapStateToProps)(PlainInputField);\n\nvar _c;\n\n$RefreshReg$(_c, \"PlainInputField\");","map":{"version":3,"sources":["/home/sring/BC-15/devops-bootcamp-jan22/BC15-green-commute/web-ui/src/components/molecules/InputTextField/PlainInputField.js"],"names":["Autocomplete","CustomChip","IconButton","InputAdornment","InputBase","TextField","Typography","React","connect","convertToSentenceCase","PlainInputField","classes","isMulti","options","icon","placeholder","onChange","value","Skills","root","option","chips","getTagProps","map","index","chipLabel","params","innerInputBase","InputProps","ref","inputProps","className","startAdornment","endAdornment","input","mapStateToProps","state","skills"],"mappings":"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","sourcesContent":["import {Autocomplete} from \"@material-ui/lab\";\nimport CustomChip from \"./CustomChip\";\nimport {IconButton, InputAdornment, InputBase, TextField, Typography} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport {convertToSentenceCase} from \"../../../state/converter/jobConverter\";\n\nconst PlainInputField = ({classes, isMulti, options, icon, placeholder,onChange, value, Skills}) => (\n    <Autocomplete\n        multiple={isMulti}\n        options={options}\n        defaultValue={Skills}\n        onChange={onChange}\n        value={value}\n        className={classes.root}\n        getOptionLabel={(option) => convertToSentenceCase(option)}\n        renderTags={(chips, getTagProps) =>\n            chips.map((option, index) => (\n                <CustomChip\n                    variant=\"outlined\"\n                    label={<Typography className={classes.chipLabel} variant={'h4'}>{option}</Typography>}\n                    size=\"small\"\n                    {...getTagProps({ index })}\n                />\n            ))\n        }\n        renderInput={(params) => (\n            !isMulti ?\n                <div className={classes.innerInputBase} ref={params.InputProps.ref}>\n                    <IconButton>\n                        {icon}\n                    </IconButton>\n                    <InputBase\n                        {...params.inputProps}\n                        inputProps={{ className: classes['textInput']}}\n                        placeholder={placeholder}\n                        \n                    />\n                </div> :\n                <TextField\n                    {...params}\n                    variant=\"outlined\"\n                    placeholder={placeholder}\n                    InputProps={{\n                        ...params.InputProps,\n                        startAdornment: <><InputAdornment position=\"start\">{icon}</InputAdornment>{params.InputProps.startAdornment}</>,\n                        endAdornment: null,\n                        classes: {root: classes['textField'],input: classes['textInput']}\n                    }}\n                />\n        )}\n    />\n);\n\nconst mapStateToProps = (state) => {\n    return {\n        Skills: state.skills\n    };\n}; \n\nexport default connect(mapStateToProps)(PlainInputField);\n"]},"metadata":{},"sourceType":"module"}