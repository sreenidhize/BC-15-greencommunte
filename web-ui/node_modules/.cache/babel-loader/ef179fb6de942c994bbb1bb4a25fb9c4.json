{"ast":null,"code":"import { jobLocation, jobSkill, userLocation, getFilters, fetchSavedJobs, fetchJob, fetchJobs, getAllSkills } from \"../../state/action/action\";\nexport const getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (Math.floor(max) - Math.ceil(min)) + Math.ceil(min));\n};\nexport const StepPageDispatch = dispatch => {\n  return {\n    jobLocation: data => dispatch(jobLocation(data)),\n    userLocation: data => dispatch(userLocation(data)),\n    skills: data => dispatch(jobSkill(data))\n  };\n};\n_c = StepPageDispatch;\nexport const chipAndFilterGroupDispatch = dispatch => {\n  return {\n    getFilters: data => dispatch(getFilters(data))\n  };\n};\nexport const maxDistance = filters => {\n  let distArray = [];\n\n  for (let i = 0; i < 4; i++) {\n    if (filters[i].checked) {\n      distArray = filters[i].label.split(\"-\");\n    }\n  }\n\n  return (10 + Number(distArray[0])) * 1000;\n};\nexport const jobType = filters => {\n  let distArray = \"\";\n\n  for (let i = 9; i <= 12; i++) {\n    if (filters[i].checked) {\n      distArray = filters[i].label;\n    }\n  }\n\n  distArray = distArray.replace(\" \", \"_\");\n  return distArray.toUpperCase();\n};\nexport const experienceLevel = filters => {\n  let distArray = \"\";\n\n  for (let i = 13; i <= 16; i++) {\n    if (filters[i].checked) {\n      distArray = filters[i].label;\n    }\n  }\n\n  distArray = distArray.replace(\"-\", \"_\");\n  return distArray.toUpperCase();\n};\nexport const getFilterGroupChecked = (objectArray, text) => {\n  for (let i = 0; i < objectArray.length; i++) {\n    if (objectArray[i].label === text) {\n      objectArray[i].checked = !objectArray[i].checked;\n    }\n  }\n\n  return objectArray;\n};\nexport const getFilterGroupClearAll = objectArray => {\n  for (let i = 0; i < objectArray.length; i++) {\n    objectArray[i].checked = false;\n  }\n\n  return objectArray;\n};\nexport const SavedJobsDispatch = dispatch => {\n  return {\n    fetchSavedJobs: data => dispatch(fetchSavedJobs(data)),\n    fetchJob: data => dispatch(fetchJob(data))\n  };\n};\n_c2 = SavedJobsDispatch;\nexport const LandingPageDispatch = dispatch => {\n  return {\n    fetchJobs: data => dispatch(fetchJobs(data)),\n    fetchJob: data => dispatch(fetchJob(data)),\n    getAllSkills: data => dispatch(getAllSkills(data))\n  };\n};\n_c3 = LandingPageDispatch;\nexport const FindJobDispatch = dispatch => {\n  return {\n    location: data => dispatch(jobLocation(data)),\n    skills: data => dispatch(jobSkill(data))\n  };\n};\n_c4 = FindJobDispatch;\nexport const StepDispatch = dispatch => {\n  return {\n    getAllSkills: data => dispatch(getAllSkills(data))\n  };\n};\n_c5 = StepDispatch;\nexport const landingPageLocationAndSkillParams = (params, initialJobLocation, finalJobLocation, jobLocation, skill, points) => {\n  if (jobLocation !== null) {\n    if (jobLocation.length !== 0) {\n      const selectedLocation = points[jobLocation.split(\",\")[0]];\n      return { ...params,\n        lon: selectedLocation[0],\n        lat: selectedLocation[1]\n      };\n    }\n  } else {\n    return {};\n  }\n};\nexport const landingPageLocationAndSkillStr2 = (initialJobLocation, finalJobLocation, jobLocation) => {\n  if (jobLocation !== null) {\n    if (jobLocation.length !== 0) {\n      return jobLocation.split(\",\")[0];\n    }\n\n    return \"\";\n  }\n\n  return \"\";\n};\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"StepPageDispatch\");\n$RefreshReg$(_c2, \"SavedJobsDispatch\");\n$RefreshReg$(_c3, \"LandingPageDispatch\");\n$RefreshReg$(_c4, \"FindJobDispatch\");\n$RefreshReg$(_c5, \"StepDispatch\");","map":{"version":3,"sources":["/home/sring/BC-15/devops-bootcamp-jan22/BC15-green-commute/web-ui/src/utils/utils/utils.js"],"names":["jobLocation","jobSkill","userLocation","getFilters","fetchSavedJobs","fetchJob","fetchJobs","getAllSkills","getRandomInt","min","max","Math","floor","random","ceil","StepPageDispatch","dispatch","data","skills","chipAndFilterGroupDispatch","maxDistance","filters","distArray","i","checked","label","split","Number","jobType","replace","toUpperCase","experienceLevel","getFilterGroupChecked","objectArray","text","length","getFilterGroupClearAll","SavedJobsDispatch","LandingPageDispatch","FindJobDispatch","location","StepDispatch","landingPageLocationAndSkillParams","params","initialJobLocation","finalJobLocation","skill","points","selectedLocation","lon","lat","landingPageLocationAndSkillStr2"],"mappings":"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","sourcesContent":["import {\n  jobLocation,\n  jobSkill,\n  userLocation,\n  getFilters,\n  fetchSavedJobs,\n  fetchJob,\n  fetchJobs,\n  getAllSkills,\n} from \"../../state/action/action\";\n\nexport const getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (Math.floor(max) - Math.ceil(min)) + Math.ceil(min));\n};\n\nexport const StepPageDispatch = (dispatch) => {\n  return {\n    jobLocation: (data) => dispatch(jobLocation(data)),\n    userLocation: (data) => dispatch(userLocation(data)),\n    skills: (data) => dispatch(jobSkill(data)),\n  };\n};\n\nexport const chipAndFilterGroupDispatch = (dispatch) => {\n  return {\n    getFilters: (data) => dispatch(getFilters(data)),\n  };\n};\n\nexport const maxDistance = (filters) => {\n  let distArray = [];\n  for (let i = 0; i < 4; i++) {\n    if (filters[i].checked) {\n      distArray = filters[i].label.split(\"-\");\n    }\n  }\n  return (10 + Number(distArray[0])) * 1000;\n};\n\nexport const jobType = (filters) => {\n  let distArray = \"\";\n  for (let i = 9; i <= 12; i++) {\n    if (filters[i].checked) {\n      distArray = filters[i].label;\n    }\n  }\n  distArray = distArray.replace(\" \", \"_\");\n  return distArray.toUpperCase();\n};\n\nexport const experienceLevel = (filters) => {\n  let distArray = \"\";\n  for (let i = 13; i <= 16; i++) {\n    if (filters[i].checked) {\n      distArray = filters[i].label;\n    }\n  }\n  distArray = distArray.replace(\"-\", \"_\");\n  return distArray.toUpperCase();\n};\n\nexport const getFilterGroupChecked = (objectArray, text) => {\n  for (let i = 0; i < objectArray.length; i++) {\n    if (objectArray[i].label === text) {\n      objectArray[i].checked = !objectArray[i].checked;\n    }\n  }\n  return objectArray;\n};\nexport const getFilterGroupClearAll = (objectArray) => {\n  for (let i = 0; i < objectArray.length; i++) {\n    objectArray[i].checked = false;\n  }\n  return objectArray;\n};\n\nexport const SavedJobsDispatch = (dispatch) => {\n  return {\n    fetchSavedJobs: (data) => dispatch(fetchSavedJobs(data)),\n    fetchJob: (data) => dispatch(fetchJob(data)),\n  };\n};\n\nexport const LandingPageDispatch = (dispatch) => {\n  return {\n    fetchJobs: (data) => dispatch(fetchJobs(data)),\n    fetchJob: (data) => dispatch(fetchJob(data)),\n    getAllSkills: (data) => dispatch(getAllSkills(data)),\n  };\n};\n\nexport const FindJobDispatch = (dispatch) => {\n  return {\n    location: (data) => dispatch(jobLocation(data)),\n    skills: (data) => dispatch(jobSkill(data)),\n  };\n};\n\nexport const StepDispatch = (dispatch) => {\n  return {\n    getAllSkills: (data) => dispatch(getAllSkills(data)),\n  };\n};\n\n\nexport const landingPageLocationAndSkillParams = (\n  params,\n  initialJobLocation,\n  finalJobLocation,\n  jobLocation,\n  skill,\n  points\n) => {\n  if (jobLocation !== null) {\n    if (jobLocation.length !== 0) {\n      const selectedLocation = points[jobLocation.split(\",\")[0]];\n        return {\n          ...params,\n          lon: selectedLocation[0],\n          lat: selectedLocation[1],\n        };\n    }\n  } else {\n    return {};\n  }\n};\n\nexport const landingPageLocationAndSkillStr2 = (\n  initialJobLocation,\n  finalJobLocation,\n  jobLocation\n) => {\n  if (jobLocation !== null) {\n    if (jobLocation.length !== 0) {\n      return jobLocation.split(\",\")[0];\n    }\n    return \"\";\n  }\n  return \"\";\n};\n"]},"metadata":{},"sourceType":"module"}