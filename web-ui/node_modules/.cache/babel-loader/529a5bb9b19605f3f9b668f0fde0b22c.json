{"ast":null,"code":"var _jsxFileName = \"/home/sring/BC-15/devops-bootcamp-jan22/BC15-green-commute/web-ui/src/components/molecules/ChipGroup/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Chip from \"../../atoms/Chip\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\nimport { apis } from \"../../../utils/resources/resources\";\nimport { chipAndFilterGroupDispatch, experienceLevel, jobType, landingPageLocationAndSkillParams, // landingPageLocationAndSkillParams,\nmaxDistance } from \"../../../utils/utils/utils\";\nimport { convertServiceToClientJobs } from \"../../../state/converter/jobConverter\";\nimport { points } from \"../../../utils/constants/constant\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1)\n  },\n  chips: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(1, 2)\n    }\n  },\n  clearAll: {\n    marginTop: theme.spacing(2),\n    marginLeft: 50,\n    color: theme.palette.secondary.main,\n    height: 1,\n    textAlign: \"center\",\n    cursor: \"pointer\"\n  }\n}));\n\nconst ChipGroup = props => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    dataTestId,\n    Filters\n  } = props;\n\n  const getChips = objectArray => {\n    const chips = [];\n\n    for (let i = 0; i < objectArray.length; i++) {\n      if (objectArray[i].checked === true) {\n        chips.push(objectArray[i].label);\n      }\n    }\n\n    return chips;\n  };\n\n  const [localFilters, setLocalFilters] = useState(Filters);\n  const [chipState, setChipState] = useState(getChips(localFilters));\n  useEffect(() => {\n    setChipState(getChips(localFilters));\n    setLocalFilters(localFilters); // eslint-disable-next-line\n  }, [Filters]);\n  let params = {};\n  const initialJobLocation = [];\n  const finalJobLocation = \"\";\n  params = landingPageLocationAndSkillParams(params, initialJobLocation, finalJobLocation, props.jobLocation, props.skill, points);\n  console.log(params);\n  const fetchJobsUrl = new URL(apis.GET_JOBS);\n\n  const handleSearch = () => {\n    Object.keys(params).forEach(key => fetchJobsUrl.searchParams.append(key, params[key]));\n    fetch(fetchJobsUrl).then(res => res.json()).then(res => props.fetchJobs(convertServiceToClientJobs(res))).catch(e => console.log(e));\n  };\n\n  const handleDelete = chipToDelete => () => {\n    const chips = [...chipState];\n    const index = chips.indexOf(chipToDelete);\n\n    if (index !== -1) {\n      chips.splice(index, 1);\n      setChipState(chips);\n    }\n\n    let flag = 0;\n\n    for (let i = 0; i < localFilters.length; i++) {\n      if (localFilters[i].label === chipToDelete) {\n        localFilters[i].checked = false;\n      }\n\n      if (localFilters[i].label === \"Yes\") {\n        flag = 1;\n      }\n    }\n\n    props.getFilters(localFilters);\n    setLocalFilters(localFilters);\n\n    if (chipToDelete === \"Yes\" || flag === 1) {\n      params = { ...params,\n        is_green_commute: false\n      };\n    } else if (flag === 0) {\n      params = { ...params,\n        is_green_commute: true\n      };\n    }\n\n    maxDistance(localFilters) ? params = { ...params,\n      distance: maxDistance(localFilters),\n      is_green_commute: props.filters[4].checked\n    } : params = { ...params,\n      is_green_commute: props.filters[4].checked\n    };\n    jobType(props.filters) ? params = { ...params,\n      job_type: jobType(props.filters),\n      is_green_commute: props.filters[4].checked\n    } : params = { ...params,\n      is_green_commute: props.filters[4].checked\n    };\n    experienceLevel(props.filters) ? params = { ...params,\n      experience_level: experienceLevel(props.filters),\n      is_green_commute: props.filters[4].checked\n    } : params = { ...params,\n      is_green_commute: props.filters[4].checked\n    };\n    props.skill[0] ? params = { ...params,\n      skill: props.skill[0],\n      is_green_commute: props.filters[4].checked\n    } : params = { ...params,\n      is_green_commute: props.filters[4].checked\n    };\n    handleSearch();\n  };\n\n  const clearChips = () => {\n    for (let i = 0; i < localFilters.length; i++) {\n      localFilters[i].checked = false;\n    }\n\n    props.getFilters(localFilters);\n    setChipState([]);\n  };\n\n  const clearAllChips = () => {\n    clearChips();\n    props.skill[0] ? params = { ...params,\n      skill: props.skill[0],\n      is_green_commute: false\n    } : params = { ...params,\n      is_green_commute: false\n    };\n    handleSearch();\n  }; // eslint-disable-next-line\n\n\n  const Chips = localFilters.map(object => {\n    if (object.checked === true) {\n      if (object.label !== \"Yes\") {\n        return /*#__PURE__*/_jsxDEV(Chip, {\n          content: object.label,\n          handleDelete: handleDelete(object.label)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(Chip, {\n          content: \"Green Commute\",\n          handleDelete: handleDelete(object.label)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": dataTestId,\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        className: classes.chips,\n        xs: 10,\n        children: Chips\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), chipState.length !== 0 && /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          onClick: clearAllChips,\n          className: classes.clearAll,\n          children: \"clear all\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChipGroup, \"5BzOKy73WDB7bu6s+w7by92uP8M=\", false, function () {\n  return [useStyles];\n});\n\n_c = ChipGroup;\n\nconst mapStateToProps = state => {\n  return {\n    Filters: state.filters,\n    jobLocation: state.jobLocation,\n    userLocation: state.userLocation,\n    skill: state.skills,\n    filters: state.filters,\n    draftJob: state.draftJob,\n    cabOptions: state.cabOptions,\n    metroOptions: state.metroOptions\n  };\n};\n\nchipAndFilterGroupDispatch();\nexport default connect(mapStateToProps, chipAndFilterGroupDispatch)(ChipGroup);\n\nvar _c;\n\n$RefreshReg$(_c, \"ChipGroup\");","map":{"version":3,"sources":["/home/sring/BC-15/devops-bootcamp-jan22/BC15-green-commute/web-ui/src/components/molecules/ChipGroup/index.js"],"names":["React","useEffect","useState","makeStyles","Chip","Grid","Typography","connect","apis","chipAndFilterGroupDispatch","experienceLevel","jobType","landingPageLocationAndSkillParams","maxDistance","convertServiceToClientJobs","points","useStyles","theme","root","paddingTop","spacing","paddingBottom","chips","display","flexWrap","margin","clearAll","marginTop","marginLeft","color","palette","secondary","main","height","textAlign","cursor","ChipGroup","props","classes","dataTestId","Filters","getChips","objectArray","i","length","checked","push","label","localFilters","setLocalFilters","chipState","setChipState","params","initialJobLocation","finalJobLocation","jobLocation","skill","console","log","fetchJobsUrl","URL","GET_JOBS","handleSearch","Object","keys","forEach","key","searchParams","append","fetch","then","res","json","fetchJobs","catch","e","handleDelete","chipToDelete","index","indexOf","splice","flag","getFilters","is_green_commute","distance","filters","job_type","experience_level","clearChips","clearAllChips","Chips","map","object","mapStateToProps","state","userLocation","skills","draftJob","cabOptions","metroOptions"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Chip from \"../../atoms/Chip\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\nimport { apis } from \"../../../utils/resources/resources\";\nimport {\n  chipAndFilterGroupDispatch,\n  experienceLevel,\n  jobType,\n  landingPageLocationAndSkillParams,\n  // landingPageLocationAndSkillParams,\n  maxDistance,\n} from \"../../../utils/utils/utils\";\nimport { convertServiceToClientJobs } from \"../../../state/converter/jobConverter\";\nimport { points } from \"../../../utils/constants/constant\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  },\n  chips: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(1, 2),\n    },\n  },\n  clearAll: {\n    marginTop: theme.spacing(2),\n    marginLeft: 50,\n    color: theme.palette.secondary.main,\n    height: 1,\n    textAlign: \"center\",\n    cursor: \"pointer\",\n  },\n}));\n\nconst ChipGroup = (props) => {\n  const classes = useStyles();\n  const { dataTestId, Filters } = props;\n  const getChips = (objectArray) => {\n    const chips = [];\n    for (let i = 0; i < objectArray.length; i++) {\n      if (objectArray[i].checked === true) {\n        chips.push(objectArray[i].label);\n      }\n    }\n    return chips;\n  };\n  const [localFilters, setLocalFilters] = useState(Filters);\n  const [chipState, setChipState] = useState(getChips(localFilters));\n  useEffect(() => {\n    setChipState(getChips(localFilters));\n    setLocalFilters(localFilters);\n    // eslint-disable-next-line\n  }, [Filters]);\n  let params = {};\n  const initialJobLocation = [];\n  const finalJobLocation = \"\";\n  params = landingPageLocationAndSkillParams(\n    params,\n    initialJobLocation,\n    finalJobLocation,\n    props.jobLocation,\n    props.skill,\n    points\n  );\n  console.log(params);\n  const fetchJobsUrl = new URL(apis.GET_JOBS);\n  const handleSearch = () => {\n    Object.keys(params).forEach((key) =>\n      fetchJobsUrl.searchParams.append(key, params[key])\n    );\n    fetch(fetchJobsUrl)\n      .then((res) => res.json())\n      .then((res) => props.fetchJobs(convertServiceToClientJobs(res)))\n      .catch((e) => console.log(e));\n  };\n\n  const handleDelete = (chipToDelete) => () => {\n    const chips = [...chipState];\n    const index = chips.indexOf(chipToDelete);\n    if (index !== -1) {\n      chips.splice(index, 1);\n      setChipState(chips);\n    }\n    let flag = 0;\n    for (let i = 0; i < localFilters.length; i++) {\n      if (localFilters[i].label === chipToDelete) {\n        localFilters[i].checked = false;\n      }\n      if (localFilters[i].label === \"Yes\") {\n        flag = 1;\n      }\n    }\n    props.getFilters(localFilters);\n    setLocalFilters(localFilters);\n    if (chipToDelete === \"Yes\" || flag === 1) {\n      params = { ...params, is_green_commute: false };\n    } else if (flag === 0) {\n      params = { ...params, is_green_commute: true };\n    }\n    maxDistance(localFilters)\n      ? (params = {\n          ...params,\n          distance: maxDistance(localFilters),\n          is_green_commute: props.filters[4].checked,\n        })\n      : (params = { ...params, is_green_commute: props.filters[4].checked });\n    jobType(props.filters)\n      ? (params = {\n          ...params,\n          job_type: jobType(props.filters),\n          is_green_commute: props.filters[4].checked,\n        })\n      : (params = { ...params, is_green_commute: props.filters[4].checked });\n    experienceLevel(props.filters)\n      ? (params = {\n          ...params,\n          experience_level: experienceLevel(props.filters),\n          is_green_commute: props.filters[4].checked,\n        })\n      : (params = { ...params, is_green_commute: props.filters[4].checked });\n    props.skill[0]\n      ? (params = {\n          ...params,\n          skill: props.skill[0],\n          is_green_commute: props.filters[4].checked,\n        })\n      : (params = { ...params, is_green_commute: props.filters[4].checked });\n    handleSearch();\n  };\n  const clearChips = () => {\n    for (let i = 0; i < localFilters.length; i++) {\n      localFilters[i].checked = false;\n    }\n    props.getFilters(localFilters);\n    setChipState([]);\n  };\n  const clearAllChips = () => {\n    clearChips();\n    props.skill[0]\n      ? (params = {\n          ...params,\n          skill: props.skill[0],\n          is_green_commute: false,\n        })\n      : (params = { ...params, is_green_commute: false });\n    handleSearch();\n  };\n  // eslint-disable-next-line\n  const Chips = localFilters.map((object) => {\n    if (object.checked === true) {\n      if (object.label !== \"Yes\") {\n        return (\n          <Chip\n            content={object.label}\n            handleDelete={handleDelete(object.label)}\n          ></Chip>\n        );\n      } else {\n        return (\n          <Chip\n            content={\"Green Commute\"}\n            handleDelete={handleDelete(object.label)}\n          ></Chip>\n        );\n      }\n    }\n  });\n  return (\n    <div data-testid={dataTestId} className={classes.root}>\n      <Grid container>\n        <Grid item className={classes.chips} xs={10}>\n          {Chips}\n        </Grid>\n        {chipState.length !== 0 && (\n          <Grid item xs={2}>\n            <Typography onClick={clearAllChips} className={classes.clearAll}>\n              clear all\n            </Typography>\n          </Grid>\n        )}\n      </Grid>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    Filters: state.filters,\n    jobLocation: state.jobLocation,\n    userLocation: state.userLocation,\n    skill: state.skills,\n    filters: state.filters,\n    draftJob: state.draftJob,\n    cabOptions: state.cabOptions,\n    metroOptions: state.metroOptions,\n  };\n};\n\nchipAndFilterGroupDispatch();\n\nexport default connect(mapStateToProps, chipAndFilterGroupDispatch)(ChipGroup);\n"]},"metadata":{},"sourceType":"module"}